- React and Redux are completely separate libraries, but they can be used together using a library called react-redux
- Redux is responsible for data / application state and React is responsible for views which display the data
- Class based components vs function based components: functional component doesn't need to access (local) state
- React Containers (aka Smart Components) are Components which have been promoted so that they can access state (ie Redux data)
- Application state is generated by reducer functions
- When application state changes, containers will re-render
- Actions are for changing state. They must contain a 'type' property and typically have a payload
- Action creator returns an object which is automatically sent to all reducers
- Redux flow: user event calls an action creator, action creator returns an action, actions is sent to all reducers, reducers return state, change in state re-renders containers
- Reducers must never mutate state. Either return the existing state or a completely new object.
- Controlled field: form element where the value of the input is set by the state of the component (instead of the other way around)
- When passing a callback into html that uses 'this', you must bind that method to 'this' in the constructor (this is not necessary when using arrow notation to wrapp the callback)
- bindActionCreators inside of mapDispatchToProps makes sure that whatever is returned by the action flows through all the reducers
- redux-promise is a middleware that looks at the payload of an action and if it is a Promise, waits until the promise has been fulfilled and dispatches a new action with the same type but with the payload being the resolved promise
- the connect function has the format connect(mapStateToProps, mapDispatchToProps)(ReactClass)
- <Router history={browserHistory} means the router will look at the part of the url after the domain to see if new components need to be rendered. hashHisory will look at the part of the url after a #
- If <Route> elements are nested, the parent will have a reference to its children as this.props.children
- Use <IndexRoute> to have a child match the parent path. For example <Route path='/' component={App}><IndexRoute component={childComponent} /></Route> This will send childComponent as this.props.children to App when the user goes to the root domain
